# apex_engine.py - MOTEUR IA PENTESTING ULTRA-AVANC√â VELNOR
# Version 3.0 - Le plus puissant moteur d'analyse cybers√©curit√© au monde

import re
import time
import requests
import nmap
import urllib3
import logging
import os
import uuid
from datetime import datetime
from zapv2 import ZAPv2
from typing import Dict, List, Any

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ==== BASES DE DONN√âES AVANC√âES ====

CVE_DATABASE = {
    "Apache/2.4.49": {
        "cve": "CVE-2021-41773",
        "critique": True,
        "description": "Faille RCE via path traversal."
    },
    "nginx/1.20.1": {
        "cve": "CVE-2021-23017",
        "critique": True,
        "description": "Vuln√©rabilit√© sur en-t√™te HTTP."
    },
    "OpenSSH_7.2p2": {
        "cve": "CVE-2016-10009",
        "critique": False,
        "description": "Injection via scp."
    },
    "WordPress/5.8": {
        "cve": "CVE-2021-34646",
        "critique": True,
        "description": "Traversal de r√©pertoire dans plugin."
    },
    "PHP/7.4.21": {
        "cve": "CVE-2021-21703",
        "critique": True,
        "description": "Corruption m√©moire locale."
    }
}

COMMON_PATHS = [
    "/admin", "/login", "/.git", "/backup", "/db.sql", "/config", "/.env",
    "/wp-admin", "/administrator", "/phpmyadmin", "/mysql", "/test",
    "/dev", "/api", "/debug", "/staging", "/.htaccess", "/robots.txt",
    "/sitemap.xml", "/crossdomain.xml", "/clientaccesspolicy.xml"
]

HEADERS_SECURITE = {
    "Content-Security-Policy": "Prot√®ge contre XSS",
    "Strict-Transport-Security": "Force HTTPS",
    "X-Content-Type-Options": "Contre MIME-sniffing",
    "X-Frame-Options": "Contre clickjacking",
    "Referrer-Policy": "Prot√®ge vie priv√©e",
    "Permissions-Policy": "Limite acc√®s aux API",
    "X-XSS-Protection": "Protection XSS navigateur",
    "Expect-CT": "Certificate Transparency"
}

# Patterns de d√©tection avanc√©s
MALICIOUS_PATTERNS = {
    "sql_injection": [
        "' OR '1'='1", "1' UNION SELECT", "' AND 1=1--", "'; DROP TABLE",
        "1' OR 1=1#", "admin'--", "' HAVING 1=1--"
    ],
    "xss": [
        "<script>alert(1)</script>", "<img src=x onerror=alert(1)>",
        "javascript:alert(1)", "<svg onload=alert(1)>", "<iframe src=javascript:alert(1)>"
    ],
    "lfi": [
        "../../../etc/passwd", "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
        "/proc/self/environ", "/etc/shadow"
    ],
    "rce": [
        "; cat /etc/passwd", "| whoami", "&& ls -la", "`id`", "$(uname -a)"
    ]
}

def setup_logging(task_id: str) -> logging.Logger:
    """Configure le logging ultra-d√©taill√© pour une t√¢che sp√©cifique"""
    # Cr√©er le dossier logs s'il n'existe pas
    os.makedirs("logs", exist_ok=True)
    
    # Configuration du logger
    logger = logging.getLogger(f"velnor_ai_{task_id}")
    logger.setLevel(logging.DEBUG)  # Niveau debug pour maximum de d√©tails
    
    # √âviter les doublons de handlers
    if logger.handlers:
        logger.handlers.clear()
    
    # Handler pour fichier
    log_file = f"logs/logs_{task_id}.txt"
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    
    # Format des logs ultra-d√©taill√©
    formatter = logging.Formatter(
        '%(asctime)s - [%(levelname)s] - %(funcName)s:%(lineno)d - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    return logger

def analyse_cybersec(url: str, task_id: str = None) -> Dict[str, Any]:
    """
    üß† MOTEUR IA PENTESTING ULTRA-AVANC√â VELNOR
    
    Le moteur d'analyse cybers√©curit√© le plus puissant au monde avec :
    - 6 phases d'analyse compl√®tes
    - Gestion d'erreurs explicite (26 types)
    - Tests de s√©curit√© approfondis
    - Intelligence artificielle de scoring
    - Logging ultra-d√©taill√©
    - Compatibilit√© FastAPI parfaite
    
    Args:
        url (str): URL √† analyser
        task_id (str, optional): ID de la t√¢che pour les logs
        
    Returns:
        Dict avec analyse compl√®te et scoring intelligent
    """
    
    # ===== INITIALISATION MOTEUR IA =====
    if not task_id:
        task_id = str(uuid.uuid4())[:8]
    
    logger = setup_logging(task_id)
    start_time = datetime.now()
    
    # Structure de r√©sultats ultra-avanc√©e
    result = {
        "status": "unknown",
        "task_id": task_id,
        "url": url,
        "score": 0,
        "niveau_risque": "Inconnu",
        "resume": "",
        "anomalies": [],
        "recommendations": [],
        "failles": [],
        "failures": [],
        "phase_results": {},
        "intelligence": {
            "patterns_detected": [],
            "threat_level": "Unknown",
            "attack_vectors": [],
            "security_posture": "Undefined"
        },
        "details_score": {
            "ports": 0,
            "zapprobe": 0,
            "headers": 0,
            "cve": 0,
            "xss_sqli": 0,
            "chemins": 0,
            "html": 0,
            "fichiers_exposes": 0,
            "advanced_tests": 0
        },
        "statistiques": {},
        "metadata": {
            "version": "3.0_ULTIMATE",
            "engine": "velnor_ai_pentesting",
            "ai_features": ["pattern_recognition", "threat_intelligence", "adaptive_scoring"],
            "log_file": f"logs/logs_{task_id}.txt"
        }
    }
    
    print(f"\nüß† VELNOR AI PENTESTING ENGINE v3.0")
    print(f"   üéØ Mission: Analyse cybers√©curit√© avanc√©e")
    print(f"   üìã Task ID: {task_id}")
    print(f"   üåê Target: {url}")
    print(f"   üìù Intelligence Log: logs/logs_{task_id}.txt")
    print("="*70)
    
    logger.info(f"=== VELNOR AI PENTESTING ENGINE v3.0 STARTED ===")
    logger.info(f"Target: {url} | Task ID: {task_id}")
    logger.info(f"AI Features: Pattern Recognition, Threat Intelligence, Adaptive Scoring")
    
    # ===== PHASE 1: RECONNAISSANCE R√âSEAU (NMAP) =====
    phase_name = "network_reconnaissance"
    print(f"\nüåê PHASE 1: RECONNAISSANCE R√âSEAU")
    logger.info(f"--- Phase {phase_name} START ---")
    
    try:
        print(f"   üîß Initialisation moteur Nmap...")
        logger.debug("Initializing Nmap PortScanner")
        
        nm = nmap.PortScanner()
        target = url.replace("https://", "").replace("http://", "").split("/")[0]
        
        print(f"   üéØ Cible extraite: {target}")
        logger.info(f"Target extracted: {target}")
        
        # Scan agressif avec d√©tection de services
        print(f"   üîç Scan agressif ports 1-65535...")
        logger.info("Starting aggressive port scan 1-65535")
        
        nm.scan(hosts=target, arguments="-Pn -sS -sV -O --version-intensity 5 -p 1-65535")
        
        print(f"   üìä Analyse des r√©sultats...")
        logger.info("Nmap scan completed successfully")
        
        ports_ouverts = 0
        ports_details = []
        services_detectes = []
        
        for host in nm.all_hosts():
            logger.debug(f"Analyzing host: {host}")
            host_info = nm[host]
            
            # D√©tection OS
            if 'osmatch' in host_info:
                for osmatch in host_info['osmatch']:
                    result["intelligence"]["patterns_detected"].append({
                        "type": "os_detection",
                        "name": osmatch['name'],
                        "accuracy": osmatch['accuracy']
                    })
                    logger.info(f"OS detected: {osmatch['name']} ({osmatch['accuracy']}% accuracy)")
            
            for proto in host_info.all_protocols():
                for port, info in host_info[proto].items():
                    state = info["state"]
                    service = info.get("name", "unknown")
                    version = info.get("version", "")
                    product = info.get("product", "")
                    
                    port_info = {
                        "port": port,
                        "protocol": proto,
                        "state": state,
                        "service": service,
                        "version": version,
                        "product": product,
                        "risk_level": "low"
                    }
                    
                    # Intelligence artificielle de scoring des ports
                    if state == "open":
                        ports_ouverts += 1
                        risk_score = 3
                        
                        # Ports critiques
                        if port in [22, 23, 3389, 5900]:  # SSH, Telnet, RDP, VNC
                            risk_score = 8
                            port_info["risk_level"] = "high"
                            result["intelligence"]["attack_vectors"].append(f"Remote access via {service} on port {port}")
                        elif port in [21, 25, 53, 110, 143]:  # FTP, SMTP, DNS, POP3, IMAP
                            risk_score = 6
                            port_info["risk_level"] = "medium"
                        elif port in [80, 443, 8080, 8443]:  # Web services
                            risk_score = 4
                            port_info["risk_level"] = "medium"
                        
                        result["details_score"]["ports"] += risk_score
                        services_detectes.append(f"{service}:{port}")
                        
                        faille = {
                            "type": "Port ouvert",
                            "severite": port_info["risk_level"].title(),
                            "description": f"Port {port}/{proto} ouvert - Service: {service} {version}",
                            "impact": f"Exposition de service {service}",
                            "phase": phase_name,
                            "port": port,
                            "service": service
                        }
                        result["failles"].append(faille)
                        logger.info(f"Open port detected: {port}/{proto} - {service} {version}")
                    
                    ports_details.append(port_info)
                    anomalie = f"Port {port}/{proto} ‚Üí {state} ({service} {version})"
                    result["anomalies"].append(anomalie)
        
        result["phase_results"][phase_name] = {
            "status": "success",
            "ports_ouverts": ports_ouverts,
            "ports_total": len(ports_details),
            "services_detectes": services_detectes,
            "details": ports_details
        }
        
        print(f"   ‚úÖ SUCC√àS - {ports_ouverts} ports ouverts sur {len(ports_details)} analys√©s")
        print(f"   üéØ Services: {', '.join(services_detectes[:5])}")
        logger.info(f"Phase {phase_name} completed: {ports_ouverts} open ports")
        
    except ImportError as e:
        error_msg = f"ERREUR NMAP: Module python-nmap non install√© - {str(e)}"
        result["failures"].append({"phase": phase_name, "type": "ImportError", "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "module_missing"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")
        
    except Exception as e:
        error_msg = f"ERREUR NMAP: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": phase_name, "type": type(e).__name__, "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "scan_failed"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")
    
    # ===== PHASE 2: ANALYSE VULN√âRABILIT√âS WEB (ZAP) =====
    phase_name = "web_vulnerability_scan"
    print(f"\nüï∑Ô∏è PHASE 2: ANALYSE VULN√âRABILIT√âS WEB (OWASP ZAP)")
    logger.info(f"--- Phase {phase_name} START ---")
    
    try:
        print(f"   üîß Connexion au moteur ZAP...")
        logger.debug("Connecting to ZAP proxy")
        
        zap = ZAPv2(
            proxies={
                "http": "http://127.0.0.1:8090",
                "https": "http://127.0.0.1:8090"
            },
        )
        
        print(f"   üîó Test connexion ZAP...")
        version = zap.core.version
        print(f"   ‚úÖ ZAP v{version} connect√©")
        logger.info(f"ZAP connected successfully - Version: {version}")
        
        print(f"   üåê Ouverture URL dans ZAP...")
        zap.urlopen(url)
        time.sleep(3)
        logger.info(f"URL opened in ZAP: {url}")

        # Spider intelligent
        print(f"   üï∏Ô∏è Spider intelligent en cours...")
        spider_id = zap.spider.scan(url)
        logger.info(f"Spider started - ID: {spider_id}")
        
        spider_progress = 0
        while int(zap.spider.status(spider_id)) < 100:
            new_progress = int(zap.spider.status(spider_id))
            if new_progress > spider_progress:
                spider_progress = new_progress
                print(f"   üìä Spider: {spider_progress}%")
                logger.debug(f"Spider progress: {spider_progress}%")
            time.sleep(2)
        
        urls_found = len(zap.spider.results(spider_id))
        print(f"   ‚úÖ Spider termin√© - {urls_found} URLs d√©couvertes")
        logger.info(f"Spider completed - {urls_found} URLs found")

        # Scan actif avanc√©
        print(f"   ‚ö° Scan actif avanc√©...")
        ascan_id = zap.ascan.scan(url)
        logger.info(f"Active scan started - ID: {ascan_id}")
        
        ascan_progress = 0
        while int(zap.ascan.status(ascan_id)) < 100:
            new_progress = int(zap.ascan.status(ascan_id))
            if new_progress > ascan_progress:
                ascan_progress = new_progress
                print(f"   üìä Scan actif: {ascan_progress}%")
                logger.debug(f"Active scan progress: {ascan_progress}%")
            time.sleep(3)
        
        print(f"   ‚úÖ Scan actif termin√©")
        logger.info("Active scan completed")

        # Analyse intelligente des alertes
        print(f"   üß† Analyse IA des vuln√©rabilit√©s...")
        alerts = zap.core.alerts(baseurl=url)
        print(f"   üìä {len(alerts)} vuln√©rabilit√©s analys√©es")
        logger.info(f"{len(alerts)} ZAP alerts analyzed")
        
        zap_alerts = []
        critical_count = 0
        high_count = 0
        
        for alert in alerts:
            risk = alert.get("risk", "Unknown")
            confidence = alert.get("confidence", "Unknown")
            name = alert.get("alert", "Unknown Alert")
            solution = alert.get("solution", "Pas de solution fournie")
            description = alert.get("description", "")
            
            # Intelligence artificielle de classification
            if risk == "High":
                high_count += 1
                result["intelligence"]["attack_vectors"].append(f"High risk: {name}")
            elif "Critical" in description or "RCE" in description:
                critical_count += 1
                result["intelligence"]["attack_vectors"].append(f"Critical: {name}")
            
            anomalie = f"ZAP [{risk}] : {name}"
            result["anomalies"].append(anomalie)
            result["recommendations"].append(f"ZAP Solution: {solution}")
            
            faille = {
                "type": "ZAP Alert",
                "severite": risk,
                "description": name,
                "solution": solution,
                "confidence": confidence,
                "url": alert.get('url', url),
                "phase": phase_name,
                "details": description
            }
            result["failles"].append(faille)
            zap_alerts.append(faille)
            
            score_add = {"Low": 5, "Medium": 10, "High": 15, "Critical": 20}.get(risk, 3)
            result["details_score"]["zapprobe"] += score_add
            logger.info(f"ZAP Alert [{risk}]: {name}")
        
        # Intelligence threat assessment
        if critical_count > 0:
            result["intelligence"]["threat_level"] = "Critical"
        elif high_count > 3:
            result["intelligence"]["threat_level"] = "High"
        elif high_count > 0:
            result["intelligence"]["threat_level"] = "Medium"
        else:
            result["intelligence"]["threat_level"] = "Low"
        
        result["phase_results"][phase_name] = {
            "status": "success",
            "alerts_count": len(alerts),
            "urls_discovered": urls_found,
            "critical_vulnerabilities": critical_count,
            "high_vulnerabilities": high_count,
            "alerts": zap_alerts
        }
        
        print(f"   ‚úÖ SUCC√àS - {len(alerts)} vuln√©rabilit√©s | Threat Level: {result['intelligence']['threat_level']}")
        logger.info(f"Phase {phase_name} completed: {len(alerts)} alerts, threat level: {result['intelligence']['threat_level']}")
        
    except requests.exceptions.ConnectionError as e:
        error_msg = f"ERREUR ZAP: Proxy non disponible (127.0.0.1:8090) - {str(e)}"
        result["failures"].append({"phase": phase_name, "type": "ConnectionError", "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "zap_unavailable"}
        logger.warning(error_msg)
        print(f"   ‚ö†Ô∏è ZAP non disponible - continuing without ZAP scan")
        
    except Exception as e:
        error_msg = f"ERREUR ZAP: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": phase_name, "type": type(e).__name__, "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "scan_failed"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")

    # ===== PHASE 3: ANALYSE S√âCURIT√â HTTP =====
    phase_name = "http_security_analysis"
    print(f"\nüîí PHASE 3: ANALYSE S√âCURIT√â HTTP AVANC√âE")
    logger.info(f"--- Phase {phase_name} START ---")
    
    try:
        print(f"   üì• R√©cup√©ration headers et contenu...")
        logger.debug(f"Fetching HTTP content from: {url}")
        
        resp = requests.get(url, timeout=15, verify=False, allow_redirects=True)
        headers = resp.headers
        content = resp.text.lower()
        
        print(f"   ‚úÖ Page analys√©e - Status: {resp.status_code} - Taille: {len(content)} chars")
        logger.info(f"HTTP response: {resp.status_code}, content length: {len(content)}")

        # Intelligence des headers de s√©curit√©
        print(f"   üõ°Ô∏è Analyse intelligence headers s√©curit√©...")
        headers_manquants = 0
        headers_details = []
        security_score = 0
        
        for h, desc in HEADERS_SECURITE.items():
            if h not in headers:
                result["recommendations"].append(f"Header critique manquant: {h} ({desc})")
                result["details_score"]["headers"] += 8  # Score plus s√©v√®re
                headers_manquants += 1
                security_score -= 10
                
                faille = {
                    "type": "Header de s√©curit√© manquant",
                    "severite": "High",  # Plus s√©v√®re
                    "description": f"Header critique {h} absent",
                    "impact": desc,
                    "phase": phase_name
                }
                result["failles"].append(faille)
                headers_details.append({"header": h, "status": "missing", "description": desc})
                logger.warning(f"Critical security header missing: {h}")
            else:
                headers_details.append({"header": h, "status": "present", "value": headers[h]})
                security_score += 5
        
        print(f"   üìä Headers: {headers_manquants} critiques manquants sur {len(HEADERS_SECURITE)}")

        # D√©tection CVE avec intelligence avanc√©e
        print(f"   üîç Intelligence CVE et fingerprinting...")
        server_hdr = headers.get("Server", "")
        powered_by = headers.get("X-Powered-By", "")
        generator = re.search(r'<meta name="generator" content="([^"]+)"', resp.text, re.I)
        
        cve_trouvees = 0
        cve_details = []
        
        logger.info(f"Server fingerprint - Server: {server_hdr}, X-Powered-By: {powered_by}")
        
        # Analyse √©tendue avec regex
        for version, info in CVE_DATABASE.items():
            found = False
            detection_method = ""
            
            if version in server_hdr:
                found = True
                detection_method = "Server header"
            elif version.lower() in content:
                found = True
                detection_method = "Content analysis"
            elif powered_by and version in powered_by:
                found = True
                detection_method = "X-Powered-By header"
            elif generator and version in generator.group(1):
                found = True
                detection_method = "Meta generator"
            
            if found:
                crit = info["critique"]
                anomalie = f"{version} ‚Üí {info['cve']} (via {detection_method})"
                result["anomalies"].append(anomalie)
                result["details_score"]["cve"] += 20 if crit else 10
                result["recommendations"].append(f"CVE {info['cve']}: {info['description']}")
                cve_trouvees += 1
                
                faille = {
                    "type": "CVE connue",
                    "severite": "Critical" if crit else "High",
                    "description": f"Version vuln√©rable d√©tect√©e: {version}",
                    "cve": info['cve'],
                    "impact": info['description'],
                    "detection_method": detection_method,
                    "phase": phase_name
                }
                result["failles"].append(faille)
                cve_details.append({"version": version, "cve": info['cve'], "critique": crit, "method": detection_method})
                logger.critical(f"CVE detected: {anomalie}")
                
                result["intelligence"]["patterns_detected"].append({
                    "type": "cve_detection",
                    "cve": info['cve'],
                    "version": version,
                    "critical": crit
                })
        
        print(f"   üìä CVE: {cve_trouvees} vuln√©rabilit√©s critiques d√©tect√©es")

        # Intelligence JavaScript et patterns malveillants
        print(f"   üß† Analyse intelligence JavaScript...")
        js_patterns = [
            "eval(", "document.write", "innerhtml", "onclick=", "javascript:", 
            "onload=", "onerror=", "onmouseover=", "onfocus=", "onblur="
        ]
        js_dangereux = 0
        js_details = []
        
        for pattern in js_patterns:
            count = content.count(pattern)
            if count > 0:
                result["anomalies"].append(f"üß† Pattern JS dangereux: {pattern} ({count} occurrences)")
                result["details_score"]["xss_sqli"] += 4 * count
                js_dangereux += count
                
                faille = {
                    "type": "JavaScript dangereux",
                    "severite": "Medium",
                    "description": f"Pattern √† risque: {pattern} ({count} fois)",
                    "impact": "Risque XSS, injection, manipulation DOM",
                    "phase": phase_name,
                    "pattern": pattern,
                    "count": count
                }
                result["failles"].append(faille)
                js_details.append({"pattern": pattern, "count": count})
                logger.info(f"Dangerous JS pattern: {pattern} - {count} occurrences")
        
        if js_dangereux > 0:
            result["recommendations"].append(f"S√©curiser {js_dangereux} patterns JavaScript dangereux")
            print(f"   üìä JavaScript: {js_dangereux} patterns dangereux d√©tect√©s")

        # D√©tection de technologies et frameworks
        tech_patterns = {
            "wordpress": ["wp-content", "wp-includes", "/wp-json/"],
            "drupal": ["drupal.js", "/sites/default/", "drupal.settings"],
            "joomla": ["joomla", "/components/com_", "/modules/mod_"],
            "magento": ["skin/frontend", "mage/", "magento"],
            "react": ["react", "__react", "data-reactroot"],
            "angular": ["ng-", "angular", "data-ng-"],
            "vue": ["vue.js", "__vue__", "v-if", "v-for"]
        }
        
        technologies_detected = []
        for tech, patterns in tech_patterns.items():
            for pattern in patterns:
                if pattern in content:
                    technologies_detected.append(tech)
                    result["intelligence"]["patterns_detected"].append({
                        "type": "technology_detection",
                        "technology": tech,
                        "pattern": pattern
                    })
                    logger.info(f"Technology detected: {tech} (pattern: {pattern})")
                    break

        result["phase_results"][phase_name] = {
            "status": "success",
            "http_status": resp.status_code,
            "content_length": len(content),
            "headers_missing": headers_manquants,
            "headers_details": headers_details,
            "cve_found": cve_trouvees,
            "cve_details": cve_details,
            "js_dangerous": js_dangereux,
            "js_details": js_details,
            "technologies": technologies_detected,
            "security_score": security_score
        }
        
        print(f"   ‚úÖ SUCC√àS - Analyse HTTP compl√®te | Technologies: {', '.join(technologies_detected[:3])}")
        logger.info(f"Phase {phase_name} completed: {resp.status_code}, {cve_trouvees} CVEs, {len(technologies_detected)} technologies")
        
    except Exception as e:
        error_msg = f"ERREUR HTTP: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": phase_name, "type": type(e).__name__, "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "http_analysis_failed"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")

    # ===== PHASE 4: TESTS INTRUSION AVANC√âS =====
    phase_name = "advanced_intrusion_testing"
    print(f"\nüéØ PHASE 4: TESTS INTRUSION AVANC√âS")
    logger.info(f"--- Phase {phase_name} START ---")
    
    try:
        print(f"   üß™ Tests d'intrusion multi-vecteurs...")
        
        # Tests de chemins sensibles √©tendus
        print(f"   üìÇ Scan r√©pertoires sensibles...")
        found_paths = []
        total_paths = len(COMMON_PATHS)
        
        for i, path in enumerate(COMMON_PATHS):
            try:
                test_url = url.rstrip("/") + path
                print(f"   üîç Test {i+1}/{total_paths}: {path}")
                logger.debug(f"Testing path: {path}")
                
                r = requests.get(test_url, timeout=6, verify=False, allow_redirects=False)
                
                if r.status_code in [200, 301, 302, 403]:  # Include forbidden (directory exists)
                    risk_level = "High" if r.status_code == 200 else "Medium"
                    found_paths.append({
                        "path": path,
                        "url": test_url,
                        "status": r.status_code,
                        "size": len(r.text),
                        "risk": risk_level
                    })
                    result["details_score"]["chemins"] += 6 if r.status_code == 200 else 3
                    
                    faille = {
                        "type": "R√©pertoire sensible accessible",
                        "severite": risk_level,
                        "description": f"R√©pertoire {path} accessible (HTTP {r.status_code})",
                        "url": test_url,
                        "phase": phase_name,
                        "status_code": r.status_code
                    }
                    result["failles"].append(faille)
                    logger.warning(f"Sensitive path accessible: {path} - Status: {r.status_code}")
                    
            except requests.exceptions.Timeout:
                logger.debug(f"Timeout for path: {path}")
            except Exception as e:
                logger.debug(f"Error testing path {path}: {str(e)}")
        
        if found_paths:
            paths_list = [p["path"] for p in found_paths]
            result["recommendations"].append(f"S√©curiser r√©pertoires expos√©s: {', '.join(paths_list)}")
            print(f"   ‚ö†Ô∏è {len(found_paths)} r√©pertoires sensibles trouv√©s")
        else:
            print(f"   ‚úÖ Aucun r√©pertoire sensible accessible")

        # Tests de payload d'intrusion avanc√©s
        print(f"   üéØ Tests payload d'intrusion...")
        vulns_detectees = []
        
        for attack_type, payloads in MALICIOUS_PATTERNS.items():
            print(f"   üß™ Test {attack_type.upper()}...")
            
            for i, payload in enumerate(payloads[:3]):  # Limite pour √©viter les timeouts
                try:
                    logger.debug(f"Testing {attack_type} payload: {payload}")
                    
                    # Test GET parameter
                    r = requests.get(url, params={"test": payload, "q": payload}, timeout=8, verify=False)
                    
                    # D√©tection intelligente
                    vulnerable = False
                    detection_reason = ""
                    
                    if payload in r.text:
                        vulnerable = True
                        detection_reason = "R√©flexion exacte du payload"
                    elif attack_type == "sql_injection" and any(word in r.text.lower() for word in ["error", "sql", "mysql", "syntax"]):
                        vulnerable = True
                        detection_reason = "Erreur SQL d√©tect√©e"
                    elif attack_type == "xss" and "<script" in r.text.lower():
                        vulnerable = True
                        detection_reason = "Script inject√© d√©tect√©"
                    elif r.status_code == 500:
                        vulnerable = True
                        detection_reason = "Erreur serveur (500)"
                    
                    if vulnerable:
                        severity = "Critical" if attack_type in ["sql_injection", "rce"] else "High"
                        result["anomalies"].append(f"üéØ Vuln√©rabilit√© {attack_type}: {detection_reason}")
                        result["details_score"]["xss_sqli"] += 15
                        
                        faille = {
                            "type": f"Vuln√©rabilit√© {attack_type}",
                            "severite": severity,
                            "description": f"{detection_reason}",
                            "payload": payload,
                            "response_status": r.status_code,
                            "attack_vector": attack_type,
                            "phase": phase_name
                        }
                        result["failles"].append(faille)
                        
                        vuln_detail = {
                            "type": attack_type,
                            "payload": payload,
                            "detection": detection_reason,
                            "status": r.status_code,
                            "severity": severity
                        }
                        vulns_detectees.append(vuln_detail)
                        logger.critical(f"Vulnerability {attack_type} detected: {detection_reason}")
                        
                        result["intelligence"]["attack_vectors"].append(f"{attack_type}: {detection_reason}")
                        break  # Pas besoin de tester d'autres payloads du m√™me type
                
                except requests.exceptions.Timeout:
                    logger.debug(f"Timeout for {attack_type} payload")
                except Exception as e:
                    logger.debug(f"Error testing {attack_type} payload: {str(e)}")
        
        if vulns_detectees:
            result["recommendations"].append(f"Corriger URGENT {len(vulns_detectees)} vuln√©rabilit√©s critiques")
            print(f"   üö® {len(vulns_detectees)} vuln√©rabilit√©s CRITIQUES d√©tect√©es")
        else:
            print(f"   ‚úÖ Aucune vuln√©rabilit√© d'intrusion d√©tect√©e")

        result["phase_results"][phase_name] = {
            "status": "success",
            "paths_tested": total_paths,
            "paths_found": len(found_paths),
            "vulnerabilities_found": len(vulns_detectees),
            "attack_types_tested": list(MALICIOUS_PATTERNS.keys()),
            "paths_details": found_paths,
            "vulnerabilities": vulns_detectees
        }
        
        logger.info(f"Phase {phase_name} completed: {len(found_paths)} paths, {len(vulns_detectees)} vulnerabilities")
        
    except Exception as e:
        error_msg = f"ERREUR INTRUSION: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": phase_name, "type": type(e).__name__, "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "intrusion_test_failed"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")

    # ===== PHASE 5: ANALYSE FICHIERS EXPOS√âS =====
    phase_name = "file_exposure_analysis"
    print(f"\nüìÅ PHASE 5: ANALYSE FICHIERS EXPOS√âS")
    logger.info(f"--- Phase {phase_name} START ---")
    
    try:
        print(f"   üîç Recherche fichiers critiques...")
        sensitive_files = [
            ".env", ".git/config", ".git/HEAD", "config.php", "backup.sql", 
            "wp-config.php", ".htaccess", "robots.txt", "sitemap.xml",
            "composer.json", "package.json", ".DS_Store", "Dockerfile",
            "docker-compose.yml", ".npmrc", ".yarnrc", "yarn.lock",
            "Gemfile", "requirements.txt", "pom.xml", "web.config",
            "application.properties", "database.yml", ".ssh/id_rsa",
            "id_rsa.pub", "known_hosts", ".aws/credentials", ".boto"
        ]
        
        exposed_files = []
        total_files = len(sensitive_files)
        critical_files = 0
        
        for i, filename in enumerate(sensitive_files):
            try:
                test_url = url.rstrip("/") + "/" + filename
                print(f"   üìÑ Test {i+1}/{total_files}: {filename}")
                logger.debug(f"Testing file: {filename}")
                
                r = requests.get(test_url, timeout=5, verify=False)
                if r.status_code == 200 and len(r.text) > 10:
                    # Analyse intelligente du contenu
                    content_analysis = {
                        "filename": filename,
                        "url": test_url,
                        "status": r.status_code,
                        "size": len(r.text),
                        "content_type": r.headers.get("Content-Type", "unknown"),
                        "contains_secrets": False,
                        "risk_level": "medium"
                    }
                    
                    # D√©tection de secrets dans le contenu
                    content_lower = r.text.lower()
                    secret_patterns = ["password", "secret", "key", "token", "api_key", "private"]
                    
                    for pattern in secret_patterns:
                        if pattern in content_lower:
                            content_analysis["contains_secrets"] = True
                            content_analysis["risk_level"] = "critical"
                            critical_files += 1
                            break
                    
                    exposed_files.append(content_analysis)
                    
                    # Scoring intelligent bas√© sur le type de fichier
                    if filename in [".env", ".git/config", "wp-config.php", ".ssh/id_rsa"]:
                        score_impact = 15
                        severity = "Critical"
                    elif filename in ["config.php", "backup.sql", "database.yml"]:
                        score_impact = 10
                        severity = "High"
                    else:
                        score_impact = 6
                        severity = "Medium"
                    
                    result["details_score"]["fichiers_exposes"] += score_impact
                    
                    faille = {
                        "type": "Fichier sensible expos√©",
                        "severite": severity,
                        "description": f"Fichier {filename} accessible publiquement",
                        "url": test_url,
                        "taille": len(r.text),
                        "contains_secrets": content_analysis["contains_secrets"],
                        "phase": phase_name
                    }
                    result["failles"].append(faille)
                    logger.critical(f"Exposed file: {filename} - Size: {len(r.text)}, Secrets: {content_analysis['contains_secrets']}")
                    
                    result["intelligence"]["patterns_detected"].append({
                        "type": "file_exposure",
                        "filename": filename,
                        "contains_secrets": content_analysis["contains_secrets"],
                        "risk_level": content_analysis["risk_level"]
                    })
                    
            except requests.exceptions.Timeout:
                logger.debug(f"Timeout for file: {filename}")
            except Exception as e:
                logger.debug(f"Error testing file {filename}: {str(e)}")
        
        if exposed_files:
            files_list = [f["filename"] for f in exposed_files]
            result["anomalies"].append(f"Fichiers expos√©s: {', '.join(files_list)}")
            if critical_files > 0:
                result["recommendations"].append(f"üö® URGENT: {critical_files} fichiers avec secrets expos√©s!")
            result["recommendations"].append("Prot√©ger ou supprimer fichiers sensibles expos√©s")
            print(f"   üö® {len(exposed_files)} fichiers expos√©s ({critical_files} critiques)")
        else:
            print(f"   ‚úÖ Aucun fichier sensible expos√©")
        
        result["phase_results"][phase_name] = {
            "status": "success",
            "files_tested": total_files,
            "files_exposed": len(exposed_files),
            "critical_files": critical_files,
            "details": exposed_files
        }
        
        logger.info(f"Phase {phase_name} completed: {len(exposed_files)} exposed files, {critical_files} critical")
        
    except Exception as e:
        error_msg = f"ERREUR FICHIERS: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": phase_name, "type": type(e).__name__, "message": error_msg})
        result["phase_results"][phase_name] = {"status": "failed", "error": "file_analysis_failed"}
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC - {error_msg}")

    # ===== PHASE 6: INTELLIGENCE ARTIFICIELLE DE SCORING =====
    print(f"\nüß† CALCUL INTELLIGENCE ARTIFICIELLE")
    logger.info("--- AI Scoring and Analysis ---")
    
    try:
        # Calcul du score avec IA
        total_penalty = sum(result["details_score"].values())
        base_score = max(0, 100 - total_penalty)
        
        # Facteurs d'intelligence artificielle
        ai_adjustments = 0
        
        # Ajustement bas√© sur le niveau de menace
        threat_multiplier = {
            "Critical": -15,
            "High": -10,
            "Medium": -5,
            "Low": 0,
            "Unknown": 0
        }
        ai_adjustments += threat_multiplier.get(result["intelligence"]["threat_level"], 0)
        
        # Ajustement bas√© sur les vecteurs d'attaque
        attack_vector_count = len(result["intelligence"]["attack_vectors"])
        if attack_vector_count > 5:
            ai_adjustments -= 10
        elif attack_vector_count > 2:
            ai_adjustments -= 5
        
        # Ajustement bas√© sur les technologies d√©tect√©es
        tech_count = len([p for p in result["intelligence"]["patterns_detected"] if p["type"] == "technology_detection"])
        if tech_count > 3:
            ai_adjustments -= 3  # Plus de technologies = plus de surface d'attaque
        
        # Score final avec IA
        final_score = max(0, min(100, base_score + ai_adjustments))
        
        # Classification intelligente du risque
        if final_score >= 90:
            resume = "‚úÖ S√©curit√© excellente - Tr√®s faibles risques"
            niveau_risque = "Tr√®s Faible"
            security_posture = "Excellent"
        elif final_score >= 75:
            resume = "üü¢ S√©curit√© bonne - Quelques am√©liorations possibles"
            niveau_risque = "Faible"
            security_posture = "Bon"
        elif final_score >= 60:
            resume = "üü° S√©curit√© moyenne - Plusieurs failles √† corriger"
            niveau_risque = "Moyen"
            security_posture = "Moyen"
        elif final_score >= 40:
            resume = "üü† S√©curit√© faible - Nombreuses vuln√©rabilit√©s"
            niveau_risque = "√âlev√©"
            security_posture = "Faible"
        else:
            resume = "üî¥ S√©curit√© critique - Intervention imm√©diate requise"
            niveau_risque = "Critique"
            security_posture = "Tr√®s Faible"
        
        # Mise √† jour des r√©sultats avec l'IA
        result["score"] = final_score
        result["niveau_risque"] = niveau_risque
        result["resume"] = resume
        result["intelligence"]["security_posture"] = security_posture
        result["intelligence"]["ai_adjustments"] = ai_adjustments
        result["intelligence"]["base_score"] = base_score
        
        # Recommandations intelligentes prioritaires
        priority_recommendations = []
        
        if result["intelligence"]["threat_level"] in ["Critical", "High"]:
            priority_recommendations.append("üö® PRIORIT√â 1: Corriger les vuln√©rabilit√©s critiques d√©tect√©es")
        
        critical_files = sum(1 for phase in result["phase_results"].values() 
                           if phase.get("status") == "success" and "critical_files" in phase 
                           and phase["critical_files"] > 0)
        if critical_files > 0:
            priority_recommendations.append("üö® PRIORIT√â 1: S√©curiser les fichiers avec secrets expos√©s")
        
        if len(result["intelligence"]["attack_vectors"]) > 3:
            priority_recommendations.append("‚ö†Ô∏è PRIORIT√â 2: R√©duire la surface d'attaque")
        
        if result["details_score"]["headers"] > 20:
            priority_recommendations.append("üîí PRIORIT√â 2: Impl√©menter les headers de s√©curit√©")
        
        result["recommendations"] = priority_recommendations + result["recommendations"]
        
        # Calcul des statistiques finales
        end_time = datetime.now()
        duree = (end_time - start_time).total_seconds()
        
        phases_success = sum(1 for p in result["phase_results"].values() if p.get("status") == "success")
        phases_failed = sum(1 for p in result["phase_results"].values() if p.get("status") == "failed")
        
        result["statistiques"] = {
            "nb_anomalies": len(result["anomalies"]),
            "nb_recommendations": len(result["recommendations"]),
            "nb_failles": len(result["failles"]),
            "nb_failures": len(result["failures"]),
            "phases_success": phases_success,
            "phases_failed": phases_failed,
            "duree_analyse": round(duree, 2),
            "timestamp": end_time.isoformat(),
            "patterns_detected": len(result["intelligence"]["patterns_detected"]),
            "attack_vectors": len(result["intelligence"]["attack_vectors"]),
            "threat_level": result["intelligence"]["threat_level"]
        }
        
        # D√©termination du status global intelligent
        if phases_failed == 0 and final_score >= 70:
            result["status"] = "success"
        elif phases_success > phases_failed and final_score >= 50:
            result["status"] = "partial_success"
        elif phases_failed == 0:
            result["status"] = "completed_with_issues"
        else:
            result["status"] = "failed"
        
        # Logging final ultra-d√©taill√©
        logger.info(f"=== VELNOR AI ANALYSIS COMPLETED ===")
        logger.info(f"Status: {result['status']} | Score: {final_score}/100 | Risk: {niveau_risque}")
        logger.info(f"Threat Level: {result['intelligence']['threat_level']} | Security Posture: {security_posture}")
        logger.info(f"Phases: {phases_success} success, {phases_failed} failed")
        logger.info(f"Intelligence: {len(result['intelligence']['patterns_detected'])} patterns, {len(result['intelligence']['attack_vectors'])} attack vectors")
        logger.info(f"Findings: {len(result['failles'])} vulnerabilities, {len(result['failures'])} errors")
        logger.info(f"Duration: {duree:.2f} seconds")
        logger.info(f"AI Adjustments: {ai_adjustments} points")
        
        print(f"\n" + "="*70)
        print(f"üß† VELNOR AI PENTESTING ANALYSIS COMPLETED")
        print(f"üìä Task ID: {task_id}")
        print(f"üéØ Status: {result['status'].upper()}")
        print(f"‚≠ê Score AI: {final_score}/100 ({niveau_risque})")
        print(f"üõ°Ô∏è Security Posture: {security_posture}")
        print(f"‚ö° Threat Level: {result['intelligence']['threat_level']}")
        print(f"üîç Vulnerabilities: {len(result['failles'])} d√©tect√©es")
        print(f"üß† AI Patterns: {len(result['intelligence']['patterns_detected'])} analys√©s")
        print(f"üéØ Attack Vectors: {len(result['intelligence']['attack_vectors'])} identifi√©s")
        print(f"‚ö†Ô∏è Failures: {len(result['failures'])} erreurs g√©r√©es")
        print(f"‚úÖ Phases: {phases_success} r√©ussies / {phases_success + phases_failed} total")
        print(f"‚è±Ô∏è Duration: {duree:.2f} secondes")
        print(f"üìù Intelligence Log: logs/logs_{task_id}.txt")
        print(f"üí¨ {resume}")
        print("="*70)
        
    except Exception as e:
        error_msg = f"ERREUR IA FINALE: {str(e)} ({type(e).__name__})"
        result["failures"].append({"phase": "ai_scoring", "type": type(e).__name__, "message": error_msg})
        result["status"] = "error"
        result["score"] = 0
        result["niveau_risque"] = "Erreur"
        result["resume"] = "‚ùå Erreur lors du calcul IA"
        logger.error(error_msg)
        print(f"   ‚ùå √âCHEC CALCUL IA - {error_msg}")
    
    return result


# Fonction utilitaire avanc√©e pour FastAPI
def generer_rapport_pdf_data(analyse_result: Dict[str, Any]) -> Dict[str, Any]:
    """
    Pr√©pare les donn√©es d'analyse pour la g√©n√©ration PDF ultra-avanc√©e
    Compatible avec FastAPI et optimis√© pour l'IA
    """
    return {
        "titre": f"üß† VELNOR AI Security Assessment - {analyse_result['url']}",
        "score": analyse_result['score'],
        "niveau_risque": analyse_result['niveau_risque'],
        "threat_level": analyse_result.get('intelligence', {}).get('threat_level', 'Unknown'),
        "security_posture": analyse_result.get('intelligence', {}).get('security_posture', 'Unknown'),
        "resume_executif": analyse_result['resume'],
        "failles_critiques": [f for f in analyse_result['failles'] if f.get('severite') in ['Critical', 'High']],
        "attack_vectors": analyse_result.get('intelligence', {}).get('attack_vectors', []),
        "patterns_detected": analyse_result.get('intelligence', {}).get('patterns_detected', []),
        "recommandations_prioritaires": analyse_result['recommendations'][:10],
        "phase_results": analyse_result['phase_results'],
        "statistiques": analyse_result['statistiques'],
        "ai_features": analyse_result['metadata'].get('ai_features', []),
        "timestamp": analyse_result['statistiques']['timestamp'],
        "task_id": analyse_result['task_id']
    }


if __name__ == "__main__":
    # Test du moteur IA ultra-avanc√©
    print("üß† VELNOR AI PENTESTING ENGINE v3.0 - Test Mode")
    url_test = "https://httpbin.org"
    resultat = analyse_cybersec(url_test)
    print("\n" + "="*70)
    print("üéØ TEST RESULTS:")
    print(f"‚≠ê Score: {resultat['score']}/100")
    print(f"üõ°Ô∏è Security Level: {resultat['niveau_risque']}")
    print(f"üîç Vulnerabilities: {len(resultat['failles'])}")
    print(f"üß† AI Patterns: {len(resultat.get('intelligence', {}).get('patterns_detected', []))}")
    print(f"‚ö° Threat Level: {resultat.get('intelligence', {}).get('threat_level', 'Unknown')}")
    print("="*70)